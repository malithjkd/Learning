<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="24.05.0.0">
<procedure name="main">
<interface/>
<body>
<c></c>
<c>* This example shows the usage of the metrology model</c>
<c>* to measure circles and rectangles with subpixel</c>
<c>* accuracy under challenging conditions easily.</c>
<c>* </c>
<c>* Display initializations</c>
<l>dev_update_off ()</l>
<l>read_image (Image, 'Pic_2024_08_02_152420_74')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_close_window ()</l>
<l>*dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</l>
<l>*set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c>* </c>
<c>* Define the approximate position and the measure</c>
<c>* tolerance for the circles</c>
<l>*RowCircle := [52:89:500]</l>
<l>*CircleInitRow := [RowCircle,RowCircle]</l>
<l>*CircleInitColumn := [gen_tuple_const(6,348),gen_tuple_const(6,438)]</l>
<l>*gen_cross_contour_xld (Cross1, CircleInitRow, CircleInitColumn, 6, 0.785398)</l>
<l>*CircleInitRadius := [gen_tuple_const(6,23),gen_tuple_const(6,23)]</l>
<l>*CircleRadiusTolerance := 12</l>
<c></c>
<c>* Define the approximate position and the measure</c>
<c>* tolerance for the rectangles</c>
<l>RectangleInitRow := [450, 690, 925, 1155, 1395, 1630, 1870]</l>
<l>RectangleInitColumn := [1525, 1525, 1525, 1530, 1530, 1530 , 1540]</l>
<l>RectangleInitPhi := [0, 0, 0, 0, 0, 0, 0]</l>
<l>RectangleInitLength2 := [25, 25, 25, 25, 25, 25, 25]</l>
<l>RectangleInitLength1 := [600, 600, 600, 600, 600, 600, 600 ]</l>
<l>RectangleTolerance := 15</l>
<c>* </c>
<c>* Prepare the metrology model data structure</c>
<l>create_metrology_model (MetrologyHandle)</l>
<c>* Setting the image width in advance is not</c>
<c>* necessary, but improves the runtime of the</c>
<c>* first measurement.</c>
<l>set_metrology_model_image_size (MetrologyHandle, Width, Height)</l>
<c>* Add the metrology rectangle objects to the model</c>
<c>* as defined above</c>
<l>add_metrology_object_rectangle2_measure (MetrologyHandle, RectangleInitRow, RectangleInitColumn, RectangleInitPhi, RectangleInitLength1, RectangleInitLength2, RectangleTolerance, 5, .5, 1, [], [], MetrologyRectangleIndices)</l>
<c>* Add the metrology circle objects to the model</c>
<c>* as defined above</c>
<l>*add_metrology_object_circle_measure (MetrologyHandle, CircleInitRow, CircleInitColumn, CircleInitRadius, CircleRadiusTolerance, 5, 1.5, 2, [], [], MetrologyCircleIndices)</l>
<c>* It is possible to measure more than one circle/rectangle/line/ellipse</c>
<c>* instance per metrology object in one call.</c>
<c>* Since we like to measure two circles per object,</c>
<c>* we set 'num_instances' to 2.</c>
<l>*set_metrology_object_param (MetrologyHandle, MetrologyCircleIndices, 'num_instances', 2)</l>
<c>* Setting 'measure_transition' to 'uniform' assures</c>
<c>* that only consistent circles are returned, that have</c>
<c>* either only edges from bright to dark or vice versa.</c>
<c>* Since the consistency check increases runtime, it is</c>
<c>* switched off by default.</c>
<c>* In this example however, it is safer to switch it on,</c>
<c>* because both negative and positive edges are present.</c>
<l>*set_metrology_object_param (MetrologyHandle, MetrologyCircleIndices, 'measure_transition', 'uniform')</l>
<c>* Setting the minimum score can make the results more robust</c>
<l>*set_metrology_object_param (MetrologyHandle, MetrologyCircleIndices, 'min_score', .9)</l>
<c>* </c>
<c>* Perform the measurement</c>
<c>* </c>
<l>apply_metrology_model (Image, MetrologyHandle)</l>
<c>* </c>
<l>get_metrology_object_result (MetrologyHandle, MetrologyRectangleIndices, 'all', 'result_type', 'all_param', RectangleParameter)</l>
<c>* Extract the parameters for better readability</c>
<l>Sequence := [0:5:|RectangleParameter| - 1]</l>
<l>RectangleRow := RectangleParameter[Sequence]</l>
<l>RectangleColumn := RectangleParameter[Sequence + 1]</l>
<l>RectanglePhi := RectangleParameter[Sequence + 2]</l>
<l>RectangleLength1 := RectangleParameter[Sequence + 3]</l>
<l>RectangleLength2 := RectangleParameter[Sequence + 4]</l>
<c>* </c>
<c>* Access the results of the circle measurement</c>
<l>*get_metrology_object_result (MetrologyHandle, MetrologyCircleIndices, 'all', 'result_type', 'all_param', CircleParameter)</l>
<c>* Extract the parameters for better readability</c>
<l>*Sequence := [0:3:|CircleParameter| - 1]</l>
<l>*CircleRow := CircleParameter[Sequence]</l>
<l>*CircleColumn := CircleParameter[Sequence + 1]</l>
<l>*CircleRadius := CircleParameter[Sequence + 2]</l>
<c>* </c>
<c>* Display the results</c>
<c>* </c>
<c>* Get measured contours</c>
<l>get_metrology_object_result_contour (Contours, MetrologyHandle, 'all', 'all', 1.5)</l>
<c>* Get the contours of the measure regions</c>
<c>* and the coordinates of the edge points</c>
<c>* that were the basis for fitting the circles and rectangles</c>
<l>get_metrology_object_measures (Contour, MetrologyHandle, 'all', 'all', Row1, Column1)</l>
<l>gen_cross_contour_xld (Cross, Row1, Column1, 6, 0.785398)</l>
<c>* Display everything</c>
<c></c>
<l>* Color := ['gray', 'cyan', 'green']</l>
<l>*dev_display (Image)</l>
<l>*dev_set_line_width (1)</l>
<l>*dev_set_color (Color[0])</l>
<l>*dev_display (Contour)</l>
<l>*dev_set_color (Color[1])</l>
<l>*dev_display (Cross)</l>
<l>*dev_set_line_width (2)</l>
<l>*dev_set_color (Color[2])</l>
<l>*dev_display (Contours)</l>
<l>*Message := Color[2] + ': Measurement result'</l>
<l>*Message[1] := Color[1] + ': Edge candidate points'</l>
<l>*Message[2] := Color[0] + ': Measure regions'</l>
<l>*disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
